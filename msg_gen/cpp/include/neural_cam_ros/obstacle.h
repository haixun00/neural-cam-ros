/* Auto-generated by genmsg_cpp for file /home/haixun/haixun_vision/neural_cam_ros/msg/obstacle.msg */
#ifndef NEURAL_CAM_ROS_MESSAGE_OBSTACLE_H
#define NEURAL_CAM_ROS_MESSAGE_OBSTACLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"

namespace neural_cam_ros
{
template <class ContainerAllocator>
struct obstacle_ {
  typedef obstacle_<ContainerAllocator> Type;

  obstacle_()
  : name()
  , prob(0.0)
  , topleft()
  , bottomright()
  {
  }

  obstacle_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , prob(0.0)
  , topleft(_alloc)
  , bottomright(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef float _prob_type;
  float prob;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _topleft_type;
   ::geometry_msgs::Point_<ContainerAllocator>  topleft;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _bottomright_type;
   ::geometry_msgs::Point_<ContainerAllocator>  bottomright;


  typedef boost::shared_ptr< ::neural_cam_ros::obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neural_cam_ros::obstacle_<ContainerAllocator>  const> ConstPtr;
}; // struct obstacle
typedef  ::neural_cam_ros::obstacle_<std::allocator<void> > obstacle;

typedef boost::shared_ptr< ::neural_cam_ros::obstacle> obstaclePtr;
typedef boost::shared_ptr< ::neural_cam_ros::obstacle const> obstacleConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::neural_cam_ros::obstacle_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::neural_cam_ros::obstacle_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace neural_cam_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neural_cam_ros::obstacle_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neural_cam_ros::obstacle_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neural_cam_ros::obstacle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ed324cc68b63371ced6bc19d77946d2";
  }

  static const char* value(const  ::neural_cam_ros::obstacle_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ed324cc68b63371ULL;
  static const uint64_t static_value2 = 0xced6bc19d77946d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::neural_cam_ros::obstacle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neural_cam_ros/obstacle";
  }

  static const char* value(const  ::neural_cam_ros::obstacle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neural_cam_ros::obstacle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#info: topleft_, bottomright_ refering to image\n\
#info: planar_ is plane position information\n\
\n\
string name\n\
float32 prob\n\
geometry_msgs/Point topleft\n\
geometry_msgs/Point bottomright\n\
\n\
#string name\n\
#float32 depth\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::neural_cam_ros::obstacle_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neural_cam_ros::obstacle_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.prob);
    stream.next(m.topleft);
    stream.next(m.bottomright);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct obstacle_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neural_cam_ros::obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::neural_cam_ros::obstacle_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
    s << indent << "topleft: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.topleft);
    s << indent << "bottomright: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.bottomright);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NEURAL_CAM_ROS_MESSAGE_OBSTACLE_H

